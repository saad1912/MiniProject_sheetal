package com.cg.ems.ui;

import java.sql.Date;
import java.time.Period;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import org.junit.runners.model.FrameworkMethod;

import com.cg.ems.bean.Employee;
import com.cg.ems.bean.EmployeeLeave;
import com.cg.ems.exception.EMSException;
import com.cg.ems.service.ILeaveApplicationService;
import com.cg.ems.service.IUserService;
import com.cg.ems.service.LeaveApplicationServiceImpl;
import com.cg.ems.service.UserService;

public class EmployeeConsole {
	
	private Scanner scan;
	IUserService userService;
	ILeaveApplicationService leaveService;
	private boolean success;
	private String empId;
	String string;
	int number;
	List<String> stringArray;
	char wildcardChar;
	
	public EmployeeConsole() {
		userService = new UserService();
		leaveService = new LeaveApplicationServiceImpl();
	}

	public void setEmpId(String empId) {
		this.empId = empId;
	}

	public void start() {
		scan = new Scanner(System.in);
		int choice = 0;
		
		while(true) {
			showChoices();
			choice = scan.nextInt();
			
			switch(choice) {
			case 1:
				searchEmployee();
				break;
			case 2:
				applyLeave();
				break;
			case 3:
				backToMain();
				return;
			case 4:
				exit();
			default:
				tryAgain();
			}
		}
	}

	private void applyLeave() {
		System.out.println("Apply for Leave");
		Employee employee;
		try {
			
			employee = userService.getEmployeeById(empId);
			
			System.out.println(employee.toString());
			int leaveBal = employee.getEmpLeaveBal();
			System.out.println("You have Leaves Left: " + leaveBal);
			EmployeeLeave empLeave = new EmployeeLeave();
			
			System.out.println("From Date ? ");
			empLeave.setFromDate(Date.valueOf(scan.next()));
			System.out.println("To Date ? ");
			empLeave.setToDate(Date.valueOf(scan.next()));
			
			// leaveId is generated by sql sequence
			//applied date is set by sql so
			empLeave.setEmpId(empId);
			empLeave.setStatus("Applied");
			
			Period diff = Period.between(empLeave.getFromDate().toLocalDate(),
					empLeave.getToDate().toLocalDate());
			empLeave.setLeaveDuration(diff.getDays());
			
			leaveService.applyLeave(empLeave);
			System.out.println("Leave Successfully Apllied");
		} catch (EMSException e) {
			System.out.println(e.getMessage());
		}
		
	}

	private void searchEmployee() {
		System.out.println("Search Employee");
		showSearchChoices();
		int choice = 0;
		scan = new Scanner(System.in);
		choice = scan.nextInt();
		switch(choice) {
		case 1:
			searchById();
			break;
		case 2:
			searchByFirstName();
			break;
		case 3:
			searchByLastName();
			break;
		case 4:
			searchByDepartment();
			break;
		case 5:
			searchByGrade();
			break;
		case 6:
			searchByMaritalStatus();
			break;
		case 7:
			backToEmployeeConsole();
			break;
		case 8:
			exit();
		default:
			tryAgain();
		}
	}

	private void searchByMaritalStatus() {
		System.out.println("Enter Number of Marital Status to be Searched in");
		number = scan.nextInt();
		int count = 0;
		stringArray = new ArrayList<>();
		System.out.println("Enter <Employee Marital Status/es>");
		while(count < number) stringArray.add(scan.next());
		try {
			System.out.println("Fetching Searched Employees...");
			userService.searchByMarital(stringArray).forEach(System.out::println);
		} catch (EMSException e) {
			System.out.println(e.getMessage());
		}
	}

	private void searchByGrade() {
		System.out.println("Enter Number of Grades to be Searched in");
		number = scan.nextInt();
		int count = 0;
		stringArray = new ArrayList<>();
		System.out.println("Enter <Employee Grade/s>");
		while(count < number) stringArray.add(scan.next());
		try {
			System.out.println("Fetching Searched Employees...");
			userService.searchByGrade(stringArray).forEach(System.out::println);
		} catch (EMSException e) {
			System.out.println(e.getMessage());
		}
	}

	private void searchByDepartment() {
		System.out.println("Enter Number of Departments to be Searched in");
		number = scan.nextInt();
		int count = 0;
		stringArray = new ArrayList<>();
		System.out.println("Enter <Employee Department Name/s>");
		while(count < number) stringArray.add(scan.next());
		try {
			System.out.println("Fetching Searched Employees...");
			userService.searchByDept(stringArray).forEach(System.out::println);
		} catch (EMSException e) {
			System.out.println(e.getMessage());
		}
	}

	private void searchByLastName() {
		System.out.println("Enter <Employee Last Name> and <Wildcard Character>");
		string = scan.next();
		wildcardChar = scan.next().charAt(0);
		if(wildcardChar != '*' && wildcardChar != '?') {
			System.out.println("Invalid Character, Please Try Again");
			return;
		}
		try {
			System.out.println("Fetching Searched Employees...");
			userService.searchByLastName(string, wildcardChar).forEach(System.out::println);
		} catch (EMSException e) {
			System.out.println(e.getMessage());
		}
	}

	private void searchByFirstName() {
		System.out.println("Enter <Employee First Name> and <Wildcard Character>");
		string = scan.next();
		wildcardChar = scan.next().charAt(0);
		if(wildcardChar != '*' && wildcardChar != '?') {
			System.out.println("Invalid Character, Please Try Again");
			return;
		}
		try {
			System.out.println("Fetching Searched Employees...");
			userService.searchByFirstName(string, wildcardChar).forEach(System.out::println);
		} catch (EMSException e) {
			System.out.println(e.getMessage());
		}
	}

	private void searchById() {
		System.out.println("Enter <Employee Id> and <Wildcard Character>");
		string = scan.next();
		wildcardChar = scan.next().charAt(0);
		if(wildcardChar != '*' && wildcardChar != '?') {
			System.out.println("Invalid Character, Please Try Again");
			return;
		}
		try {
			System.out.println("Fetching Searched Employees...");
			userService.searchById(string, wildcardChar).forEach(System.out::println);
		} catch (EMSException e) {
			System.out.println(e.getMessage());
		}
	}

	private void backToEmployeeConsole() {
		System.out.println("Returning to Main...");
	}

	private void showSearchChoices() {
		System.out.println("[1] By Id");
		System.out.println("[2] By First Name");
		System.out.println("[3] By Last Name");
		System.out.println("[4] By Department");
		System.out.println("[5] By Grade");
		System.out.println("[6] By Marital Status");
		System.out.println("[7] Go Back to Employee Console");
		System.out.println("[8] Exit");
		System.out.print("Your Choice ? ");
	}

	private void tryAgain() {
		System.out.println("Invalid Choice, Please Try Again");
	}

	private void exit() {
		System.out.println("Exiting The Program...");
		System.exit(0);
	}

	private void backToMain() {
		System.out.println("Returning to Main...");
	}
	
	private void showChoices() {

		System.out.println("[1] Search Employee");
		System.out.println("[2] Apply for Leave");
		System.out.println("[3] Go Back to Main");
		System.out.println("[4] Exit");
		System.out.print("Your Choice ? ");
	}
}
